// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Forklift.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/ForkliftDefaultComand.h"

Forklift::Forklift() : Subsystem("Forklift") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	speedControllerHorizontal = RobotMap::forkliftspeedControllerHorizontal;
	encoder = RobotMap::forkliftencoder;
	testcontroller = RobotMap::forklifttestcontroller;
	pID = RobotMap::forkliftPID;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	speedControllerVertical = RobotMap::forkliftspeedControllerVertical;
	PDP = RobotMap::forkliftPDP;
}
    
void Forklift::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new ForkliftDefaultComand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Forklift::forkliftLoop(Joystick *joy)
{
	float z, y;
	if ((joy->GetY() <= 0.2) && (joy->GetY() >= -0.2))
	{
		y = 0;
	}
	else
	{
		y = joy->GetY();
	}
	if ((joy->GetZ() <= 0.2) && (joy->GetZ() >= -0.2))
	{
		z = 0;
	}
	else
	{
		z = joy->GetZ();
	}
	if (PDP->GetCurrent(5) <= SmartDashboard::GetNumber("Grabber Amp Limit"))
	{
		speedControllerHorizontal->Set(z);
	}
	else
	{
		speedControllerHorizontal->Set(0);
		Wait(2);
	}
	if (speedControllerVertical->GetOutputCurrent() <= SmartDashboard::GetNumber("Lift Amp Limit"))
	{
		speedControllerVertical->Set(y);
	}
	else
	{
		speedControllerVertical->Set(0);
		Wait(2);
	}
	SmartDashboard::PutNumber("Grabber Amp Out", PDP->GetCurrent(5));
	SmartDashboard::PutNumber("Lift Amp Out", speedControllerVertical->GetOutputCurrent());
}
